<?php
/* This script retrieves the relevant licensing data into globals, ready for rendering in a template */
require_once('config.php');

 
  

// load a json file
function load_json($dir, $base_filename, $ext){
  $json = load_text($dir, $base_filename, $ext);
  if(empty($json))
    return false;

  return json_decode($json);
}

// load a text file
function load_text($dir, $base_filename, $ext){
  // security validation on the filename
  if(preg_match('/[^A-Za-z0-9\-\_\.]/', $base_filename))
    return false;
    
  // check that the file exists
  $filename = $dir . '/' . $base_filename . '.' . $ext;
  if(!file_exists($filename))
    return false;

  // load the text
  $text = file_get_contents($filename);
  if(empty($text))
    return false;
  
  return $text;
}

// load a logo
function load_logo($dir, $base_filename, $cache_dir, $overwrite_cache = true){
  // security validation on the filename
  if(preg_match('/[^A-Za-z0-9\-\_\.]/', $base_filename))
    return false;

  // check if a processed logo is already cached
  $cache_filename = $cache_dir . '/' . $base_filename . '.cache.jpg';
  if(!$overwrite_cache && file_exists($cache_filename))
    return $cache_filename;
  
  // otherwise, check if an unprocessed logo exists
  $image_filename = null;
  foreach(array('.jpg', '.png', '.gif') as $ext){
    $filename = $dir . '/' . $base_filename . $ext;
    if(file_exists($filename))
  	    $image_filename = $filename;
  }
  if(!$image_filename)
    return false;
    
  // process the logo into a 250x250 image
  $output_filename = $cache_dir;
  $image = new Imagick($image_filename);
  $image->thumbnailImage(220,220, true);
  $borderWidth = abs(round(($image->getImageWidth() - 220) /2)) + 15;
  $borderHeight = abs(round(($image->getImageHeight() - 220) /2)) + 15;
  $image->borderImage(new ImagickPixel("rgb(255,255,255)"), $borderWidth, $borderHeight);
  $image->writeImage($cache_filename);
  return $cache_filename;
}


// create a comma-seperated list with an 'and' in between
function comma_separate($items){
  if(count($items) <= 1)
    return $items;
  if(count($items) <= 2)
    return $items[0] . ' and ' . $items[1];
  
  return implode(', ', array_slice($items, -2)) + ' ' .
    $items[count($items)-2] . ' and ' .
    $items[count($items)-1];
}

